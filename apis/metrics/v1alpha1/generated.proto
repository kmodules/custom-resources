/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package kmodules.xyz.custom_resources.apis.metrics.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// Field contains the information of a manifest field for which metric is collected
message Field {
  // Path defines the manifest file path, example: spec.replicas
  optional string path = 1;

  // Type defines the type of the value in the given Path
  optional string type = 2;
}

// Label contains the information of a metric label
message Label {
  // Key defines the label key
  optional string key = 1;

  // Value defines the hard coded label value
  // +optional
  optional string value = 2;

  // ValuePath defines the label value path. example: spec.replicas
  // +optional
  optional string valuePath = 3;
}

// MetricValue contains the configuration to obtain the value for a metric
message MetricValue {
  // Value contains the metric value. This is the default value of a metric.
  // Most of the time it is equal to one.
  // +optional
  optional string value = 1;

  // ValueFromPath contains the field path of the manifest file of a object.
  // example: spec.replicas
  // +optional
  optional string valueFromPath = 2;

  // ValueFromExpression contains an expression for the metric value
  // expression can be a function as well.
  // Used expression evaluation functions are:
  //
  // toInt() returns 1 if the expression is true otherwise 0,
  // example: toInt(phase == 'Running')
  //
  // evaluatePercentage(a, b) returns the value of a * b%
  // example: evaluatePercentage(replicas, maxUnavailable)
  //
  // calculateCPU() returns the cpu in unit core
  // example: calculateCPU(cpu), for cpu value 150m, it will return 0.15
  //
  // calculateMemory() returns the memory size in byte
  // example: calculateMemory(memory), for memory value 1 ki, it will return 1024
  //
  // toUnix() returns the DateTime string into unix format.
  // example: toUnix(dateTime) will return the corresponding unix value for the given dateTime
  //
  // in above examples phase, replicas, maxUnavailable, cpu, memory, dateTime are Parameter's key
  // those values will come from corresponding Parameter's value
  // +optional
  optional string valueFromExpression = 3;
}

// Metrics contains the configuration of a metric in prometheus style
message Metrics {
  // Name defines the metrics name. Example: kube_deployment_spec_replicas
  optional string name = 1;

  // Help is used to describe the metrics. Example: "Number of desired pods for a deployment."
  optional string help = 2;

  // Type defines the metrics type. Example: gauge
  optional string type = 3;

  // Field defines the metric value path of the manifest file and the type of that value
  // +optional
  optional Field field = 4;

  // Labels defines the metric labels as a key-value pair
  // +optional
  repeated Label labels = 5;

  // Params is list of parameters configuration used in expression evaluation
  // +optional
  repeated Parameter params = 6;

  // States handles metrics with label cardinality
  // +optional
  optional State states = 7;

  // MetricValue defines the configuration for the metric value
  // +optional
  optional MetricValue metricValue = 8;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=metricsconfigurations,singular=metricsconfiguration,scope=Cluster,categories={metrics,appscode,all}
// +kubebuilder:printcolumn:name="Group",type="string",JSONPath=".spec.targetRef.group"
// +kubebuilder:printcolumn:name="Resource",type="string",JSONPath=".spec.targetRef.resource"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MetricsConfiguration {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MetricsConfigurationSpec spec = 2;
}

// MetricsConfigurationList is a list of MetricsConfiguration
message MetricsConfigurationList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated MetricsConfiguration items = 2;
}

// MetricsConfigurationSpec is the spec of MetricsConfiguration
message MetricsConfigurationSpec {
  // TargetRef defines the object for which metrics will be collected
  optional TargetRef targetRef = 1;

  // List of Metrics configuration for the resource defined in TargetRef
  repeated Metrics metrics = 2;
}

// Parameter contains the information of a parameter used in expression evaluation
message Parameter {
  // Key defines the parameter's key
  optional string key = 1;

  // Value defines the parameter's value
  // +optional
  optional string value = 2;

  // ValuePath defines the manifest field path for the parameter's value. example: spec.replicas
  // +optional
  optional string valuePath = 3;
}

// State contains the configuration for generating all the time series
// of a metric with label cardinality is greater than 1
message State {
  // LabelKey defines the label key of the label which label cardinality is greater than one
  // example: labelKey = phase
  optional string labelKey = 1;

  // Values contains the list of state values
  repeated StateValues values = 2;
}

// StateValues contains the information of a state value
message StateValues {
  // LabelValue defines the value of the label.
  // Example: For labelKey phase label value can be "Running"
  optional string labelValue = 1;

  // MetricValue defines the configuration of the metric value for the corresponding LabelValue
  optional MetricValue metricValue = 2;
}

// TargetRef defines the Object's group, version, resource
message TargetRef {
  // Group defines the group of the object
  optional string group = 1;

  // Resource defines the resource of the object
  optional string resource = 2;
}

