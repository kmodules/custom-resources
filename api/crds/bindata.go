// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// appcatalog.appscode.com_appbindings.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appcatalogAppscodeCom_appbindingsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\xdd\x73\xdb\x36\x12\x7f\xf7\x5f\xb1\xa3\x3e\x38\x99\xd1\xc7\xe4\xfa\x72\xa3\x7b\xe8\x39\x8e\x3b\x93\xd6\x71\x3c\x96\x9b\x9b\xce\xe5\xe6\x0c\x12\x4b\x11\x35\x09\xb0\x00\x28\x5b\x97\xc9\xff\x7e\xb3\x00\xf8\x21\x09\xa4\xe4\xb4\xe5\x43\x62\xe1\x63\xb1\xfb\xdb\x6f\x90\xac\x12\x9f\x50\x1b\xa1\xe4\x12\x58\x25\xf0\xd9\xa2\xa4\x5f\x66\xfe\xf8\x77\x33\x17\x6a\xb1\x79\x93\xa0\x65\x6f\xce\x1e\x85\xe4\x4b\xb8\xac\x8d\x55\xe5\x1d\x1a\x55\xeb\x14\xdf\x61\x26\xa4\xb0\x42\xc9\xb3\x12\x2d\xe3\xcc\xb2\xe5\x19\x40\xaa\x91\xd1\xe0\xbd\x28\xd1\x58\x56\x56\x4b\x90\x75\x51\x9c\x01\x14\x2c\xc1\xc2\xd0\x1a\x00\x56\x55\x4b\x48\x99\x65\x85\x5a\x9f\x01\x48\x56\x22\xb1\x50\x25\x42\x72\x21\xd7\x66\xce\xaa\x2a\x4c\xd3\x9f\x26\x55\x1c\xe7\xa9\x2a\xcf\x4c\x85\x29\x91\x60\x9c\xbb\xb3\x59\x71\xab\x85\xb4\xa8\x2f\x55\x51\x97\xd2\x91\x9f\xc1\x4f\xab\x8f\x37\xb7\xcc\xe6\x4b\x98\xd3\x86\xb9\xdd\x56\xe8\xce\xf5\x07\xdd\x37\x3f\x69\x7c\x09\xc6\x6a\x21\xd7\xd1\x8d\x1b\x0f\x4f\x6f\xef\xa7\xde\xc8\xd8\xf6\x06\x93\xf9\x01\x20\x3d\x62\x17\xeb\x3e\x1f\x9c\x59\xfa\xb9\xd6\xaa\xae\x1c\x1a\x51\x04\xfc\xde\x80\x63\xca\x2c\xae\x95\x16\xcd\xef\x59\x0f\x54\xfa\xd5\xec\x6c\x7e\x3a\x45\x00\x78\x7d\x5e\x54\xd5\x5b\x8f\xb7\x1b\x2c\x84\xb1\x3f\xef\x4d\x5c\x0b\x63\xdd\x64\x55\xd4\x9a\x15\x3b\x3a\x72\xe3\x46\xc8\x75\x5d\x30\xdd\x9f\x39\x03\x30\xa9\x22\x89\x6e\x88\xd3\x8a\xa5\xc8\x69\xac\x4e\x74\xb0\x1d\xb3\x84\x2f\x5f\xcf\x00\x36\xac\x10\xdc\xa1\xe3\xd9\x57\x15\xca\x8b\xdb\xf7\x9f\xbe\x5f\xa5\x39\x96\xcc\x0f\x02\x54\x5a\x55\xa8\x6d\x2b\xa5\xb7\xa0\xd6\x76\xdb\x31\x00\x8e\x26\xd5\xa2\x72\x14\xe1\x9c\x48\xf9\x35\xc0\xc9\x5a\xd1\x80\xcd\x11\x82\x52\x91\x83\x71\xc7\x80\xca\xc0\xe6\xc2\x80\xc6\x4a\xa3\x41\x69\x1d\x4b\x3d\xb2\x40\x4b\x98\x04\x95\xfc\x86\xa9\x9d\xc3\x0a\x35\x11\x01\x93\xab\xba\xe0\x90\x2a\xb9\x41\x6d\x41\x63\xaa\xd6\x52\xfc\xaf\xa5\x6c\xc0\x2a\x77\x64\xc1\x2c\x06\x24\x9b\xc7\x59\xad\x64\x05\x81\x50\xe3\x14\x98\xe4\x50\xb2\x2d\x68\xa4\x33\xa0\x96\x3d\x6a\x6e\x89\x99\xc3\x07\xa5\x11\x84\xcc\xd4\x12\x72\x6b\x2b\xb3\x5c\x2c\xd6\xc2\x36\xde\x9a\xaa\xb2\xac\xa5\xb0\xdb\x45\xaa\xa4\xd5\x22\xa9\xad\xd2\x66\xc1\x71\x83\xc5\xc2\x88\xf5\x8c\xe9\x34\x17\x16\x53\x5b\x6b\x5c\xb0\x4a\xcc\x1c\xe3\xd2\x3a\x97\x2f\xf9\x77\xad\x7a\xce\x7b\x9c\xee\x19\xb9\x7f\x9c\x01\x0d\xe2\x4e\x56\x04\xc2\x00\x0b\xdb\x3c\xff\x1d\xbc\x34\x44\xa8\xdc\x5d\xad\xee\xa1\x39\xd4\xa9\x60\x17\x73\x87\x76\xb7\xcd\x74\xc0\x13\x50\x42\x66\xa8\xbd\xe2\x32\xad\x4a\x47\x11\x25\xaf\x94\x90\xd6\xfd\x48\x0b\x81\x72\x17\x74\x53\x27\xa5\xb0\xa4\xe9\xdf\x6b\x34\x96\xf4\x33\x87\x4b\x26\xa5\xb2\x90\x20\xd4\x15\xf9\x20\x9f\xc3\x7b\x09\x97\xac\xc4\xe2\x92\x19\xfc\xcb\x61\x27\x84\xcd\x8c\x20\x3d\x0e\x7c\x3f\xd4\xee\x2e\xf4\x68\xb5\xc3\x4d\xa0\x8c\x6a\xa8\x73\xf0\x55\x85\x29\xa9\x8a\xf0\xa2\x2d\x90\x29\x4d\xae\xdc\xdb\x19\xf3\x3e\x17\x7b\x1c\xbc\x97\x4a\x66\x62\xbd\x3b\xb3\x77\xda\x65\x6f\x61\xeb\x88\xb9\x7a\x22\xe7\x08\xe0\x51\x1c\x83\x27\x61\x73\xc7\x08\xab\xaa\x39\xdc\xe1\xef\xb5\xd0\x2e\x72\xf4\x9f\x21\x6e\x1c\x47\xec\x6d\x2d\x79\x81\x87\x33\xfb\x1c\x5d\xf8\x85\xde\x48\x6f\xaf\x3e\x00\x4a\x0a\x93\x1c\x2e\x2f\x20\xf1\x53\x4f\xb9\x48\x73\x78\x12\x45\xe1\x2c\xc3\x1c\x70\x12\xc0\x57\x4d\x14\x43\x0f\x22\xea\x0d\xd9\x77\x4a\x4c\x66\x5e\xb0\x26\xbe\x90\x5c\x11\x22\x99\xd2\x25\xb3\x4b\x48\xb6\x16\x23\xd3\x51\x3b\x68\x1e\x21\x0d\xa6\xb5\xc6\xd5\xa3\xa8\xee\xaf\x57\x9f\x50\x8b\x6c\x7b\x54\xfe\xf7\xb1\x5d\xc0\x85\x61\x49\x81\x06\xee\xaf\x57\x3b\xfc\x6f\x68\x9e\xfe\xdc\x8f\x8a\xcd\xf3\x94\xa3\xec\xa9\x92\xe4\x0f\xca\x0c\x52\xc3\x3d\xfd\x25\x0c\x89\xa1\xe4\xba\x70\x87\xa5\xaa\xd6\x6c\x4d\xee\x06\xbf\xaa\x3a\x4a\x38\x04\xd8\xda\x78\x70\x3b\xbd\x49\x63\x91\xf1\x18\x9a\x1e\xae\x44\xa9\x02\xd9\x21\xb7\x4e\x3d\xe9\x71\x0b\x99\x3c\x84\x95\x0f\xde\x46\x34\x66\xa8\x51\x52\x98\x52\x9d\x9e\x53\x74\xfe\x32\xa6\x5c\x80\x2b\x61\x73\xd4\xd0\x11\x54\x1a\x1e\x6a\x5d\x3c\x40\x59\x1b\x17\x76\xc8\xf1\x44\x26\x08\x89\xcf\x12\xde\x67\xee\x80\x27\x4c\x72\xa5\x1e\xa3\x24\x29\x57\xd5\x52\x36\x38\x0b\x19\xe2\x5d\x6d\x2c\xea\x29\xfd\x90\xb0\x55\x75\x1f\xbe\xf6\xf8\xf9\x24\x42\x72\xcc\xab\xa0\x29\x57\xa2\x33\xfb\xb1\xff\x81\x96\x3e\x34\x21\x85\x7e\x78\xf3\x6f\x11\xeb\x3c\xfb\x7c\x80\xe0\xa8\xc1\x3b\x6e\xa9\xc4\x3a\x8d\x1b\x5a\xea\x55\x28\x41\x55\xbe\x62\x84\x5f\xee\xae\x1d\x8d\x3d\x1f\x37\xfb\xd9\x62\x07\x72\x09\x4c\x6e\x9b\xc4\xe1\xad\x80\xec\x39\x08\xf5\xed\xb2\x28\x6d\x4f\x92\xe5\x3e\x47\xb7\x18\x6c\xce\x6c\xcb\x33\x3e\x57\xca\x20\x87\x64\x7b\xc4\x0a\xbb\x30\x23\xa4\xfd\xfe\x6f\xa3\xec\x52\x69\xb2\x46\x1d\x5d\xf3\x7b\x8d\x3a\x1a\x60\x0e\x18\x3e\x7f\x70\x6b\x1d\xfa\x2d\xf4\x4d\x9c\x75\x53\x01\x97\xa9\x33\x62\x55\x0f\x83\x7f\x7e\xfe\xc3\xf9\x79\x44\x5b\x7f\x99\x56\x5c\xf9\x76\xa2\xc5\xaf\x82\xf7\x9a\xc0\xa0\xdf\x4b\xbc\xd4\x06\xa7\x2e\x40\xe0\x33\x2b\xab\x02\x7d\xf9\x30\x1d\x14\xd3\x15\x17\xe4\xff\x6d\x40\x08\xbe\x2c\x82\xc2\x59\x55\x15\x02\x39\x30\x03\x95\xc6\x4c\x3c\x83\x73\xfd\xbd\xba\xa9\xff\x34\x4a\x0f\x02\x2d\x16\x44\x9e\xaa\x9d\xfd\x23\xa4\xa2\x38\xb2\x6e\xe1\xf5\xf4\xbf\xd9\x49\x75\xf0\xf1\x18\x84\x33\x17\x16\xa2\x13\x64\xe0\xd1\x09\xcf\xff\x60\xb8\xdf\x2b\x7e\x9a\xa7\xd6\xc5\x09\x91\xde\xc5\xe2\xb5\xd8\x84\xf6\xa0\x50\x3e\xd3\x35\x71\x8b\x55\xd5\x94\x70\x36\x96\x49\xce\x34\xa7\xf0\x11\x05\x85\xb0\x86\x57\x0f\xff\x6e\xb1\xfe\x4f\xae\x8c\x5d\x92\x4c\x0b\x17\x87\x5e\xcf\xe1\xea\x99\xa5\xb6\xd8\x82\x92\x2e\x2e\xfa\xb3\x55\x2f\x3b\x44\x29\xc7\x13\x05\x45\x84\x07\x3a\xe2\xa1\x09\xf4\xa4\x58\x97\xa9\xc8\xfa\x58\xe3\x06\x51\x92\x4d\xfe\xd8\xcd\x1d\xff\x68\x53\x6d\x97\xae\x32\x81\x05\x6f\x33\xae\x3b\x95\x0e\x8d\x33\x2a\xd6\xb9\xe3\x94\xaa\xfa\x62\x43\xad\x8b\x60\x80\xcf\xa1\xd5\x79\x77\xb3\x72\x48\xaa\x92\x60\x15\x26\x54\xf3\xaf\x70\xbe\x9e\x4f\xe1\xe1\xb1\x4e\x70\xd6\x8e\xc7\xa1\x48\x7d\xb1\x1e\xe8\x83\x90\xb3\xc0\xba\x23\x4e\x1d\x97\x0b\x8f\x0e\x8e\x04\x81\x41\xc1\xb6\xe8\x9b\x10\xa1\x0a\xa7\xd8\xd7\xf1\x08\x19\xa0\xa4\xd6\x82\x15\x46\xb9\xdd\x12\xde\xdf\x02\xe3\x5c\xa3\x31\x0e\xf3\x0b\x9f\x38\x7a\x21\xcd\x77\x6e\x22\x8b\x47\x77\xdf\xb9\x38\xa2\x8e\x5e\x13\xf3\xa0\x42\x5d\x0a\x63\x44\xe2\xaa\x19\x60\x64\x55\x73\xaa\x83\xdc\xda\xa0\x85\xc1\xec\x47\xfa\xad\x98\x71\x69\x8d\xe9\x44\x58\xcd\xda\x70\xda\x54\x28\xce\x6e\x7b\xd1\x67\x0a\xac\x51\x73\xbc\xa8\xe0\xd4\x93\x64\x02\xb5\x97\xd4\x5a\x2c\x2b\x1b\x08\x12\x43\x8c\xfe\xd5\x64\xad\x09\x33\x22\x05\x56\xdb\x1c\x48\x75\xf0\x79\x42\x33\x4b\xe2\xe8\x49\x69\xfe\xcf\xcf\xb1\x1a\xc3\x95\x2d\xa4\x3b\x56\x14\xea\x89\x6c\xf8\x47\xcd\xd6\x25\x35\x76\xf0\xea\xf3\xe4\xbb\xf9\x7c\xfe\x79\xf2\xda\xa1\xe9\xb3\x43\xc5\x34\x2b\xd1\x3a\x0b\xf9\x3c\xf9\xc1\xcf\x47\x09\x33\x8d\x7d\xca\x53\x40\x57\x73\x45\x4b\x9d\x91\xc0\x35\x18\x4b\x3a\x4e\x46\x1b\x9d\xc9\x6d\xc7\xb1\x6f\x7f\xd1\x36\x51\xa4\x27\x8c\x55\x4d\x47\xe1\x3b\x20\x29\x63\xb1\xab\xd3\xa2\xf7\x39\x21\x0b\x21\x11\x7e\xbd\xf8\x70\xbd\xf8\x69\xf5\xf1\x06\x2a\xb6\x2d\x14\xe3\x81\x9c\xd5\x4c\x9a\x82\xba\x57\x4a\xdf\x0a\x28\xfe\x6e\x58\x11\x2b\x69\xdc\xee\xe6\x2a\x23\xc4\x91\x1e\xe7\xc1\xdf\x0d\xdc\x7c\xbc\x07\x83\xa9\x26\x21\x34\xf8\x8e\x81\x87\x94\x7b\x40\xf4\x89\xdc\x46\xf2\x26\x12\xdd\x5c\x7d\xba\xba\xeb\x8b\x99\xab\x82\x53\xce\x36\xc2\x8a\x8d\xef\xa6\x29\x33\x09\x25\xe7\x70\xaf\x08\xa9\x03\x92\x7d\xc8\xc8\xa9\xa9\xbd\x66\x14\x3e\x3c\x4f\x3d\x12\xd3\x7e\xb5\x7b\x71\xfd\xaf\x8b\x5f\x57\x60\xac\xd2\x87\x0e\xe4\x08\xf5\x76\x7a\xdf\x5b\x39\x8a\x07\xe6\x32\x68\x0f\x9e\x83\x51\x5b\x58\x05\x26\x63\x75\xb0\x9b\x21\xd5\x6b\xa4\xf6\x2a\x84\xe0\xae\x29\x3f\x3f\xcc\xe7\xb2\xb9\x49\xeb\x95\x7f\x0e\x52\x17\xbc\x35\x3a\xdf\x65\x85\x01\x66\x8c\x4a\x85\xb3\x83\xb6\x9f\xee\x28\xef\x47\xbe\xb1\xba\x7f\xa8\xe6\xdf\xad\x7e\x6e\x7a\x92\x85\x26\xc9\x46\x6f\x4c\x28\xb8\x6b\x89\x16\xdd\xa5\x09\x57\xa9\x59\xa4\x4a\xa6\x58\x59\xb3\x50\x1b\x4a\x36\xf8\xb4\x78\x52\xfa\x51\xc8\xf5\x8c\x58\x9f\x79\xe0\xcd\xc2\xc9\xbe\xf8\xce\xfd\x17\x75\xff\xfb\x8f\xef\x3e\x2e\xe1\x82\x73\x50\xae\xd5\xaa\x0d\x66\x75\xe1\x0d\xd9\xcc\x7b\x57\x85\x53\x77\x71\x35\x85\x5a\xf0\x1f\x62\x85\xcd\xb7\xc4\x06\xaf\xce\x7b\x72\x3f\xb2\xaa\xf1\x08\x71\x2d\x8c\x8f\x08\xcd\x72\x67\x84\xc1\xbe\x83\xfd\x26\xd8\xd6\x79\x21\x06\xf4\xf4\x7b\xc0\x74\x4c\xdf\x2b\x9f\xba\x83\xce\x21\xc1\x8c\xd4\x61\x73\xdc\xba\x48\x29\xa4\x41\xdd\x06\x8a\x58\x9a\x09\xfe\xb0\x37\x2e\x2c\x1e\x8a\x77\x50\x0d\xef\xc2\x11\xe2\xa0\x90\xeb\x02\xf7\xa4\x0e\xbe\x68\x1a\x69\x63\xfa\x38\x90\x1f\x34\xda\x5a\x4b\xe4\xdd\x9d\x5f\xa2\xd5\x23\xea\x41\x29\x23\x64\x1b\xb9\x1b\x27\x3d\x8e\xe1\x1c\xde\x62\xca\x28\x09\x72\x91\x79\x23\x8f\xd0\xf5\x9c\x50\x6d\xae\x36\x82\x37\xb7\x9c\x86\x3c\x84\xcc\x87\x14\xdf\x5c\x1b\x50\x92\x47\x96\xe6\x41\x1e\x60\xa3\x84\xfb\x00\x18\xab\x6b\x77\x95\x38\x75\xe9\xd8\x50\x45\x14\x0a\xc3\xad\x3b\x2f\x66\x5b\x11\x9a\x83\xd6\xb6\x6a\xe3\x13\xe3\xac\xb2\x20\xac\x01\x94\x56\x53\x87\x63\x15\x3c\xe5\xcc\xe2\x26\x5a\x43\xf4\xef\x45\x52\x25\x4d\x5d\x22\x55\x1f\x15\x79\xf1\x1c\x7e\xec\x97\x22\x43\x6a\x8d\xa1\xba\xed\xab\xd9\xdf\xfc\xa6\x45\xcd\x7d\x9d\xfa\x88\x5b\x98\xfc\xb2\xba\xba\xbb\xb9\xf8\x70\x35\x99\x42\x52\x87\xcb\xdf\xe6\xfc\xd0\x89\xc4\x22\x07\xad\x23\x0c\x5d\x74\xf6\x69\xb4\xe9\xa7\x6b\xc9\xdd\xe5\x72\x38\xe0\xdd\xdb\xff\xd2\x19\x93\x5e\x19\xac\x20\x67\x9b\x68\x47\xd2\x59\x0f\x5c\xfa\xb7\x31\x9d\x4e\x7a\x08\x7b\x10\x32\x45\x35\x0b\xd9\xca\x9e\xe7\x44\x28\x1f\xb4\x01\x94\x3a\xf6\x0c\xd5\xbd\xb6\xda\x8b\x49\x4b\x98\xc1\x97\x89\x46\x92\xf3\x67\xdc\x4e\x62\x51\xfd\xcb\x84\x1c\x6a\xb2\xdc\x01\x73\x62\x15\x8d\x34\xd2\x7f\xfd\x0a\x1f\x65\xd7\xbc\x74\xa2\xb4\x27\x9d\x47\x52\x17\x40\x89\x65\xd2\xdc\xda\xef\x74\x31\x87\x31\x78\xfc\x22\x8a\x71\xfe\x33\x0e\xdc\x3e\xec\x5e\x70\xbb\x85\xbd\x57\x07\xc0\x76\x74\xc0\x2c\xd1\xf2\xe5\x73\xfb\x26\x71\xa0\xd3\x25\x03\x88\x04\x22\x2f\xf9\x40\xd5\x3f\x7e\x9b\x06\xf0\x9b\x51\xf2\x96\xd9\xfc\xea\x99\x18\xdc\x7f\x8b\x35\x22\xd8\x39\x15\x6b\xcd\x6b\x46\xb2\xd6\xb0\x7d\x1a\x12\xb0\xa9\x0b\x97\x60\xdc\x55\xc4\x20\x49\x68\xdb\x7c\xc6\xf9\x81\xe7\x77\xb6\xdf\x19\xda\x23\x6e\x9d\x07\x8f\x90\x6c\x7d\x9b\x5a\x69\xb9\x67\xdc\x3d\xe4\x96\xf0\x05\x26\x99\x22\xcb\xfa\x02\x93\x84\xe9\xa8\x3d\x36\x0f\xad\xa4\x35\xf0\x15\xbe\xba\x02\x93\xe8\x1e\xc2\x07\x93\x2f\xf3\x4c\xa9\x79\xc2\xf4\xd7\xc9\x74\xb0\x77\xf2\x8f\x7f\x1d\xd5\x52\x6e\x6f\x94\xa8\x62\xe4\x6d\x47\x7c\x9a\xae\xfd\x33\x04\xd9\xd0\xed\xc9\x09\x57\x50\xce\xf0\x4e\xb4\x8a\xfb\xbd\x12\x33\x98\x2c\xe3\xf1\x77\x16\x27\x9e\xef\x27\x3f\x11\x58\x2f\xe0\x23\x34\xa1\xaf\xa4\x92\xb3\x44\x48\xa6\xb7\xaf\x03\xe0\x9e\xa3\x5d\x63\xfb\x06\x4c\xff\x88\x48\x9b\x17\x0a\xe3\x05\x08\xfc\xbf\xaa\x94\x6b\xd8\xb7\x40\xb2\xf9\x73\x5e\x1f\xc3\x19\x4e\x75\xae\xf7\x19\x24\xca\xe6\xe1\x2c\x26\xc7\x48\xf6\x34\xe3\x6a\x9d\xfd\xcb\x3c\x4f\x43\x18\x10\x6b\xe9\x6c\xda\x75\x66\xdd\xa6\x11\xd2\xee\x1d\x0d\xed\x19\xc6\xf9\xc8\xfb\xaa\x20\xf5\x31\x65\x8c\xdd\x10\x02\xcc\x22\x3e\x3e\xb0\xf0\x11\x0f\xbb\x51\x3f\x73\x4c\xe2\x99\x07\x2a\xfe\x5e\x6f\xec\x5e\xb1\xc9\x44\xe6\x47\xad\xca\x93\xd3\x91\x5b\x3d\x9a\x93\x4a\xd4\x6b\x34\xed\x67\x1a\x11\xae\xdc\x3b\x6e\x5f\x8b\xf9\x4f\x12\xf0\x59\x18\xdb\x95\x0f\x5d\x6d\xfb\xa7\xe5\x2a\x5f\x4c\xdc\x61\xf6\x02\xbf\x39\x78\x5d\xd6\x14\x95\xbb\x7d\x8e\x93\x77\xcc\xd0\x47\xa4\x19\xb6\xcf\xe3\x22\xc1\x91\x57\x5a\x11\xa9\xa2\x7d\xee\xe8\xf6\x13\xc2\x11\xf4\x3b\xfb\x17\x32\xe3\x6f\x03\xfe\x7c\x8e\x8e\x18\xfe\xd1\x05\x1a\x4b\xb5\xc1\xd3\xca\xb4\xbb\x66\xed\xa8\x57\x78\x8a\x34\x31\xd6\x08\xfb\x27\xd8\x19\xf9\x48\x3c\x2a\x1c\x37\x8e\x97\xa5\xdd\x90\x6a\x3d\x8f\x5d\x53\x7a\x24\xbb\xfd\xe1\xe8\x38\x14\xf4\x8e\x2a\x27\xf4\x00\x27\x29\x27\xac\x3d\xa2\x1c\x67\xc0\x2f\x56\xce\xb9\x19\x94\xe1\xb8\x8a\xb2\xc1\xb0\x7b\x20\xc5\x40\x69\xe4\xd9\xfe\x23\xa5\x84\x55\x2f\xe1\x00\x9f\x3c\x17\xfe\x73\x01\x1c\x94\xfd\xa4\xc3\x8f\x19\x07\xc1\x33\x30\x65\xd5\xcb\xcd\x66\x64\xd2\x4f\x31\xad\xd9\xae\x38\x6e\x7c\xec\x22\xec\x7e\x5b\x75\x77\xc3\x19\x4b\x45\x21\x2c\xb3\x48\xba\x5f\x6b\x56\x96\xcc\x8a\x14\x72\x26\x79\x41\xb9\x8d\x52\x5d\x55\x15\xe1\x13\x94\xfd\x20\x37\x88\xd7\xe6\xf0\x03\xc1\x03\x46\x9a\x0f\x04\xff\x5a\x5e\x62\x1a\x9b\xed\x7c\x41\x75\x36\x8a\xf7\xde\x50\x23\x18\x6c\xde\xb0\xa2\xca\xd9\x9b\x6e\x2c\x7c\x01\xeb\xbf\x2f\xed\x4d\xfb\x4f\x5f\x90\x2f\xc1\xea\x50\xf2\x50\x9d\xc7\xd6\x18\x46\xfe\x1f\x00\x00\xff\xff\xb7\x56\xff\x6e\x0d\x2c\x00\x00")

func appcatalogAppscodeCom_appbindingsYamlBytes() ([]byte, error) {
	return bindataRead(
		_appcatalogAppscodeCom_appbindingsYaml,
		"appcatalog.appscode.com_appbindings.yaml",
	)
}

func appcatalogAppscodeCom_appbindingsYaml() (*asset, error) {
	bytes, err := appcatalogAppscodeCom_appbindingsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appcatalog.appscode.com_appbindings.yaml", size: 11277, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appcatalog.appscode.com_appbindings.yaml": appcatalogAppscodeCom_appbindingsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"appcatalog.appscode.com_appbindings.yaml": {appcatalogAppscodeCom_appbindingsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
