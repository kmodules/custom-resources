// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// appcatalog.appscode.com_appbindings.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appcatalogAppscodeCom_appbindingsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\xdd\x73\xdb\x36\x12\x7f\xf7\x5f\xb1\xa3\x3e\x38\x99\xd1\xc7\xe4\xfa\x72\xa3\x7b\xe8\x39\x8e\x3b\x93\xd6\x71\x3c\x96\x9b\x9b\xce\xe5\xe6\x0c\x12\x4b\x11\x35\x09\xb0\x00\x28\x5b\x97\xc9\xff\x7e\xb3\x00\xf8\x21\x09\xa4\xe4\xb4\xe5\x43\x62\xe1\x63\xb1\xfb\xdb\x6f\x90\xac\x12\x9f\x50\x1b\xa1\xe4\x12\x58\x25\xf0\xd9\xa2\xa4\x5f\x66\xfe\xf8\x77\x33\x17\x6a\xb1\x79\x93\xa0\x65\x6f\xce\x1e\x85\xe4\x4b\xb8\xac\x8d\x55\xe5\x1d\x1a\x55\xeb\x14\xdf\x61\x26\xa4\xb0\x42\xc9\xb3\x12\x2d\xe3\xcc\xb2\xe5\x19\x40\xaa\x91\xd1\xe0\xbd\x28\xd1\x58\x56\x56\x4b\x90\x75\x51\x9c\x01\x14\x2c\xc1\xc2\xd0\x1a\x00\x56\x55\x4b\x48\x99\x65\x85\x5a\x9f\x01\x48\x56\x22\xb1\x50\x25\x42\x72\x21\xd7\x66\xce\xaa\x2a\x4c\xd3\x9f\x26\x55\x1c\xe7\xa9\x2a\xcf\x4c\x85\x29\x91\x60\x9c\xbb\xb3\x59\x71\xab\x85\xb4\xa8\x2f\x55\x51\x97\xd2\x91\x9f\xc1\x4f\xab\x8f\x37\xb7\xcc\xe6\x4b\x98\xd3\x86\xb9\xdd\x56\xe8\xce\xf5\x07\xdd\x37\x3f\x69\x7c\x09\xc6\x6a\x21\xd7\xd1\x8d\x1b\x0f\x4f\x6f\xef\xa7\xde\xc8\xd8\xf6\x06\x93\xf9\x01\x20\x3d\x62\x17\xeb\x3e\x1f\x9c\x59\xfa\xb9\xd6\xaa\xae\x1c\x1a\x51\x04\xfc\xde\x80\x63\xca\x2c\xae\x95\x16\xcd\xef\x59\x0f\x54\xfa\xd5\xec\x6c\x7e\x3a\x45\x00\x78\x7d\x5e\x54\xd5\x5b\x8f\xb7\x1b\x2c\x84\xb1\x3f\xef\x4d\x5c\x0b\x63\xdd\x64\x55\xd4\x9a\x15\x3b\x3a\x72\xe3\x46\xc8\x75\x5d\x30\xdd\x9f\x39\x03\x30\xa9\x22\x89\x6e\x88\xd3\x8a\xa5\xc8\x69\xac\x4e\x74\xb0\x1d\xb3\x84\x2f\x5f\xcf\x00\x36\xac\x10\xdc\xa1\xe3\xd9\x57\x15\xca\x8b\xdb\xf7\x9f\xbe\x5f\xa5\x39\x96\xcc\x0f\x02\x54\x5a\x55\xa8\x6d\x2b\xa5\xb7\xa0\xd6\x76\xdb\x31\x00\x8e\x26\xd5\xa2\x72\x14\xe1\x9c\x48\xf9\x35\xc0\xc9\x5a\xd1\x80\xcd\x11\x82\x52\x91\x83\x71\xc7\x80\xca\xc0\xe6\xc2\x80\xc6\x4a\xa3\x41\x69\x1d\x4b\x3d\xb2\x40\x4b\x98\x04\x95\xfc\x86\xa9\x9d\xc3\x0a\x35\x11\x01\x93\xab\xba\xe0\x90\x2a\xb9\x41\x6d\x41\x63\xaa\xd6\x52\xfc\xaf\xa5\x6c\xc0\x2a\x77\x64\xc1\x2c\x06\x24\x9b\xc7\x59\xad\x64\x05\x81\x50\xe3\x14\x98\xe4\x50\xb2\x2d\x68\xa4\x33\xa0\x96\x3d\x6a\x6e\x89\x99\xc3\x07\xa5\x11\x84\xcc\xd4\x12\x72\x6b\x2b\xb3\x5c\x2c\xd6\xc2\x36\xde\x9a\xaa\xb2\xac\xa5\xb0\xdb\x45\xaa\xa4\xd5\x22\xa9\xad\xd2\x66\xc1\x71\x83\xc5\x82\x55\x62\xe6\xf8\x94\xd6\x79\x78\xc9\xbf\x6b\xb5\x71\xde\x63\x6c\xcf\xa6\xfd\xe3\xec\x65\x10\x66\x32\x1a\x10\x06\x58\xd8\xe6\xd9\xed\xd0\xa4\x21\x02\xe1\xee\x6a\x75\x0f\xcd\xa1\x0e\xf1\x5d\x88\x1d\xb8\xdd\x36\xd3\xe1\x4c\xb8\x08\x99\xa1\xf6\x7a\xca\xb4\x2a\x1d\x45\x94\xbc\x52\x42\x5a\xf7\x23\x2d\x04\xca\x5d\x8c\x4d\x9d\x94\xc2\x92\x62\x7f\xaf\xd1\x58\x52\xc7\x1c\x2e\x99\x94\xca\x42\x82\x50\x57\xe4\x72\x7c\x0e\xef\x25\x5c\xb2\x12\x8b\x4b\x66\xf0\xcf\x46\x99\x00\x35\x33\x42\xf0\x38\xce\xfd\x40\xba\xbb\xd0\x83\xd3\x0e\x37\x61\x30\xaa\x90\xce\x7d\x57\x15\xa6\xa4\x19\x82\x87\xb6\x40\xa6\x34\x39\x6a\x6f\x67\xcc\xb7\x5c\x64\x71\x68\x5e\x2a\x99\x89\xf5\xee\xcc\xde\x69\x97\xbd\x85\xad\x9b\xe5\xea\x89\x4c\x3f\x60\x45\x51\x0a\x9e\x84\xcd\x1d\x23\xac\xaa\xe6\x70\x87\xbf\xd7\x42\xbb\xb8\xd0\x7f\x86\xb8\x71\x1c\xb1\xb7\xb5\xe4\x05\x1e\xce\xec\x73\x74\xe1\x17\x7a\x9b\xbc\xbd\xfa\x00\x28\x29\x08\x72\xb8\xbc\x80\xc4\x4f\x3d\xe5\x22\xcd\xe1\x49\x14\x85\x33\x04\x73\xc0\x49\x00\x5f\x35\x31\x0a\x3d\x88\xa8\x37\x64\xce\x29\x31\x99\x79\xc1\x9a\xe8\x41\x72\x45\x88\x64\x4a\x97\xcc\x2e\x21\xd9\x5a\x8c\x4c\x47\xed\xa0\x79\x84\x34\x98\xd6\x1a\x57\x8f\xa2\xba\xbf\x5e\x7d\x42\x2d\xb2\xed\x51\xf9\xdf\xc7\x76\x01\x17\x86\x25\x05\x1a\xb8\xbf\x5e\xed\xf0\xbf\xa1\x79\xfa\x73\x3f\xe6\x35\xcf\x53\x8e\xb2\xa7\x4a\x92\x3f\x28\x33\x48\x0d\xf7\xf4\x97\x30\x24\x86\x92\xeb\xc2\x1d\x96\xaa\x5a\xb3\x35\x79\x17\xfc\xaa\xea\x28\xe1\x10\x3e\x6b\xe3\xc1\xed\xf4\x26\x8d\x45\xc6\x63\x68\x7a\xb8\x12\xa5\x0a\x64\x87\xdc\x3a\xf5\xa4\xc7\x2d\x64\xf2\x10\x56\x3e\x78\x1b\xd1\x98\xa1\x46\x49\x51\x49\x75\x7a\x4e\xd1\xf9\xcb\x98\x72\x01\xae\x84\xcd\x51\x43\x47\x50\x69\x78\xa8\x75\xf1\x00\x65\x6d\x5c\x94\x21\xc7\x13\x99\x20\x24\x3e\x4b\x78\x9f\xb9\x03\x9e\x30\xc9\x95\x7a\x8c\x92\xa4\x4c\x54\x4b\xd9\xe0\x2c\x64\x08\x6f\xb5\xb1\xa8\xa7\xf4\x43\xc2\x56\xd5\x7d\xf8\xda\xe3\xe7\x93\x08\xc9\x31\xaf\x82\xa6\x18\x89\xce\xec\x87\xfa\x07\x5a\xfa\xd0\x84\x14\xfa\xe1\xcd\xbf\x45\xac\xf3\xec\xf3\x01\x82\xa3\x06\xef\xb8\xa5\x02\xea\x34\x6e\x68\xa9\x57\xa1\x04\x55\xf9\x7a\x10\x7e\xb9\xbb\x76\x34\xf6\x7c\xdc\xec\x27\x87\x1d\xc8\x25\x30\xb9\x6d\xf2\x84\xb7\x02\xb2\xe7\x20\xd4\xb7\xcb\xa2\xb4\x3d\x49\x96\xfb\x1c\xdd\x62\xb0\x39\xb3\x2d\xcf\xf8\x5c\x29\x83\x1c\x92\xed\x11\x2b\xec\xc2\x8c\x90\xf6\xfb\xbf\x8d\xb2\x4b\x85\xc7\x1a\x75\x74\xcd\xef\x35\xea\x68\x80\x39\x60\xf8\xfc\xc1\xad\x75\xe8\xb7\xd0\x37\x71\xd6\x4d\x05\x5c\xa6\xce\x88\x55\x3d\x0c\xfe\xf9\xf9\x0f\xe7\xe7\x11\x6d\xfd\x65\x5a\x71\xc5\xd9\x89\x16\xbf\x0a\xde\x6b\x02\x83\x7e\x2f\xf1\x52\x1b\x9c\xba\x00\x81\xcf\xac\xac\x0a\xf4\xd5\xc2\x74\x50\x4c\x57\x4b\x90\xff\xb7\x01\x21\xf8\xb2\x08\x0a\x67\x55\x55\x08\xe4\xc0\x0c\x54\x1a\x33\xf1\x0c\xce\xf5\xf7\xca\xa4\xfe\xd3\x28\x3d\x08\xb4\x58\x10\x79\x2a\x6e\xf6\x8f\x90\x8a\xe2\xc8\xba\x85\xd7\xd3\xff\x66\x27\xd5\xc1\xc7\x63\x10\xce\x5c\x58\x88\x4e\x90\x81\x47\x27\x3c\xff\x83\xe1\x7e\xaf\xf8\x69\x9e\x5a\x17\x27\x44\x7a\x17\x8b\xd7\x62\x13\x8a\xff\x42\xf9\x4c\xd7\xc4\x2d\x56\x55\x53\xc2\xd9\x58\x26\x39\xd3\x9c\xc2\x47\x14\x14\xc2\x1a\x5e\x3d\xfc\xbb\xc5\xfa\x3f\xb9\x32\x76\x49\x32\x2d\x5c\x1c\x7a\x3d\x87\xab\x67\x96\xda\x62\x0b\x4a\xba\xb8\xe8\xcf\x56\xbd\xec\x10\xa5\x1c\x4f\x14\x14\x11\x1e\xe8\x88\x87\x26\xd0\x93\x62\x5d\xa6\x22\xeb\x63\x8d\x1b\x44\x49\x36\xf9\x63\x37\x77\xfc\xa3\x4d\xb5\x5d\xba\xca\x04\x16\xbc\xcd\xb8\xee\x54\x3a\x34\xce\xa8\x58\xe7\x8e\x53\x2a\xe2\x8b\x0d\x35\x26\x82\x01\x3e\x87\x46\xe6\xdd\xcd\xca\x21\xa9\x4a\x82\x55\x98\x50\xbc\xbf\xc2\xf9\x7a\x3e\x85\x87\xc7\x3a\xc1\x59\x3b\x1e\x87\x22\xf5\xb5\x79\xa0\x0f\x42\xce\x02\xeb\x8e\x38\xf5\x53\x2e\x3c\x3a\x38\x12\x04\x06\x05\xdb\xa2\xef\x39\x84\x2a\x9c\x62\x5f\xc7\x23\x64\x80\x92\x3a\x09\x56\x18\xe5\x76\x4b\x78\x7f\x0b\x8c\x73\x8d\xc6\x38\xcc\x2f\x7c\xe2\xe8\x85\x34\xdf\x97\x89\x2c\x1e\xdd\x7d\xa3\xe2\x88\x3a\x7a\x4d\xcc\x83\x0a\x75\x29\x8c\x11\x89\xab\x66\x80\x91\x55\xcd\xa9\x0e\x72\x6b\x83\x16\x06\xb3\x1f\xe9\xb7\x62\xc6\xa5\x35\xa6\x13\x61\x35\x6b\xc3\x69\x53\xa1\x38\xbb\xed\x45\x9f\x29\xb0\x46\xcd\xf1\xa2\x82\x53\x4f\x92\x09\xd4\x5e\x52\x6b\xb1\xac\x6c\x20\x48\x0c\x31\xfa\x57\x93\xb5\x26\xcc\x88\x14\x58\x6d\x73\x20\xd5\xc1\xe7\x09\xcd\x2c\x89\xa3\x27\xa5\xf9\x3f\x3f\xc7\x6a\x0c\x57\xb6\x90\xee\x58\x51\xa8\x27\xb2\xe1\x1f\x35\x5b\x97\xd4\xc7\xc1\xab\xcf\x93\xef\xe6\xf3\xf9\xe7\xc9\x6b\x87\xa6\xcf\x0e\x15\xd3\xac\x44\xeb\x2c\xe4\xf3\xe4\x07\x3f\x1f\x25\xcc\x34\xf6\x29\x4f\x01\x5d\xcd\x15\x2d\x75\x46\x02\xd7\x60\x2c\xe9\x38\x19\x6d\x74\x26\xb7\x1d\xc7\xbe\xdb\x45\xdb\x44\x91\x9e\x30\x56\x35\x1d\x85\xef\x80\xa4\x8c\xc5\xae\x4e\x8b\xde\xe7\x84\x2c\x84\x44\xf8\xf5\xe2\xc3\xf5\xe2\xa7\xd5\xc7\x1b\xa8\xd8\xb6\x50\x8c\x07\x72\x56\x33\x69\x0a\x6a\x56\x29\x7d\x2b\xa0\xf8\xbb\x61\x45\xac\xa4\x71\xbb\x9b\x8b\x8a\x10\x47\x7a\x9c\x07\x7f\x37\x70\xf3\xf1\x1e\x0c\xa6\x9a\x84\xd0\xe0\x3b\x06\x1e\x52\xee\x01\xd1\x27\x72\x1b\xc9\x9b\x48\x74\x73\xf5\xe9\xea\xae\x2f\x66\xae\x0a\x4e\x39\xdb\x08\x2b\x36\xbe\x79\xa6\xcc\x24\x94\x9c\xc3\xbd\x22\xa4\x0e\x48\xf6\x21\x23\xa7\xa6\x6e\x9a\x51\xf8\xf0\x3c\xf5\x48\x4c\xfb\xd5\xee\xc5\xf5\xbf\x2e\x7e\x5d\x81\xb1\x4a\x1f\x3a\x90\x23\xd4\xdb\xe9\x7d\x6f\xe5\x28\x1e\x98\xcb\xa0\x3d\x78\x0e\x46\x6d\x61\x15\x98\x8c\xd5\xc1\x6e\x86\x54\xaf\x91\xda\xab\x10\x82\xbb\xa6\xfc\xfc\x30\x9f\xcb\xe6\x9e\xac\x57\xfe\x39\x48\x5d\xf0\xd6\xe8\x7c\x97\x15\x06\x98\x31\x2a\x15\xce\x0e\xda\x7e\xba\xa3\xbc\x1f\xf9\xc6\xea\xfe\xa1\x9a\x7f\xb7\xfa\xb9\xe9\x49\x16\x9a\x24\x1b\xbd\x20\xa1\xe0\xae\x25\x5a\x74\x77\x24\x5c\xa5\x66\x91\x2a\x99\x62\x65\xcd\x42\x6d\x28\xd9\xe0\xd3\xe2\x49\xe9\x47\x21\xd7\x33\x62\x7d\xe6\x81\x37\x0b\x27\xfb\xe2\x3b\xf7\x5f\xd4\xfd\xef\x3f\xbe\xfb\xb8\x84\x0b\xce\x41\xb9\x56\xab\x36\x98\xd5\x85\x37\x64\x33\xef\x5d\x04\x4e\xdd\x3d\xd5\x14\x6a\xc1\x7f\x88\x15\x36\xdf\x12\x1b\xbc\x3a\xef\xc9\xfd\xc8\xaa\xc6\x23\xc4\xb5\x30\x3e\x22\x34\xcb\x9d\x11\x06\xfb\x0e\xf6\x9b\x60\x5b\xe7\x85\x18\xd0\xd3\xef\x01\xd3\x31\x7d\xaf\x7c\xea\x0e\x3a\x87\x04\x33\x52\x87\xcd\x71\xeb\x22\xa5\x90\x06\x75\x1b\x28\x62\x69\x26\xf8\xc3\xde\xb8\xb0\x78\x28\xde\x41\x35\xbc\x0b\x47\x88\x83\x42\xae\x0b\xdc\x93\x3a\xf8\xa2\x69\xa4\x8d\xe9\xe3\x40\x7e\xd0\x68\x6b\x2d\x91\x77\x57\x7c\x89\x56\x8f\xa8\x07\xa5\x8c\x90\x6d\xe4\x6e\x9c\xf4\x38\x86\x73\x78\x8b\x29\xa3\x24\xc8\x45\xe6\x8d\x3c\x42\xd7\x73\x42\xb5\xb9\xda\x08\xde\x5c\x6a\x1a\xf2\x10\x32\x1f\x52\x7c\x73\x6d\x40\x49\x1e\x59\x9a\x07\x79\x80\x8d\x12\xee\x03\x60\xac\xae\x53\x5b\x6b\x9c\xba\x74\x6c\xa8\x22\x0a\x85\xe1\xd6\x9d\x17\xb3\xad\x08\xcd\x41\x6b\x5b\xb5\xf1\x89\x71\x56\x59\x10\xd6\x00\x4a\xab\xa9\xc3\xb1\x0a\x9e\x72\x66\x71\x13\xad\x21\xfa\xf7\x22\xa9\x92\xa6\x2e\x91\xaa\x8f\x8a\xbc\x78\x0e\x3f\xf6\x4b\x91\x21\xb5\xc6\x50\xdd\xf6\xd5\xec\x2f\x7a\xd3\xa2\xe6\xbe\x4e\x7d\xc4\x2d\x4c\x7e\x59\x5d\xdd\xdd\x5c\x7c\xb8\x9a\x4c\x21\xa9\xc3\x5d\x6f\x73\x7e\xe8\x44\x62\x91\x83\xd6\x11\x86\x2e\x3a\xfb\x34\xda\xf4\xd3\xb5\xe4\xee\x2e\x39\x1c\xf0\xee\xed\x7f\xe9\x8c\x49\xaf\x0c\x56\x90\xb3\x4d\xb4\x23\xe9\xac\x07\x2e\xfd\xbb\x96\x4e\x27\x3d\x84\x3d\x08\x99\xa2\x9a\x85\x6c\x65\xcf\x73\x22\x94\x0f\xda\x00\x4a\x1d\x7b\x86\xea\x5e\x4a\xed\xc5\xa4\x25\xcc\xe0\xcb\x44\x23\xc9\xf9\x33\x6e\x27\xb1\xa8\xfe\x65\x42\x0e\x35\x59\xee\x80\x39\xb1\x8a\x46\x1a\xe9\xbf\x7e\x85\x8f\xb2\x6b\x5e\x3a\x51\xda\x93\xce\x23\xa9\x0b\xa0\xc4\x32\x69\x2e\xe9\x77\xba\x98\xc3\x18\x3c\x7e\x11\xc5\x38\xff\x19\x07\x6e\x1f\x76\x2f\xb8\xdd\xc2\xde\x9b\x02\x60\x3b\x3a\x60\x96\x68\xf9\xf2\xb9\x7d\x4f\x38\xd0\xe9\x92\x01\x44\x02\x91\x97\x7c\xa0\xea\x1f\xbf\x4d\x03\xf8\xcd\x28\x79\xcb\x6c\x7e\xf5\x4c\x0c\xee\xbf\xa3\x1a\x11\xec\x9c\x8a\xb5\xe6\x25\x22\x59\x6b\xd8\x3e\x0d\x09\xd8\xd4\x85\x4b\x30\xee\x2a\x62\x90\x24\xb4\x6d\x3e\xe3\xfc\xc0\xf3\x3b\xdb\xef\x0c\xed\x11\xb7\xce\x83\x47\x48\xb6\xbe\x4d\xad\xb4\xdc\x33\xee\x1e\x72\x4b\xf8\x02\x93\x4c\x91\x65\x7d\x81\x49\xc2\x74\xd4\x1e\x9b\x87\x56\xd2\x1a\xf8\x0a\x5f\x5d\x81\x49\x74\x0f\xe1\x83\xc9\x97\x79\xa6\xd4\x3c\x61\xfa\xeb\x64\x3a\xd8\x3b\xf9\xc7\xbf\x7d\x6a\x29\xb7\x37\x4a\x54\x31\xf2\xb6\x23\x3e\x4d\xd7\xfe\x19\x82\x6c\xe8\xf6\xe4\x84\x2b\x28\x67\x78\x27\x5a\xc5\xfd\x5e\x89\x19\x4c\x96\xf1\xf8\x3b\x8b\x13\xcf\xf7\x93\x9f\x08\xac\x17\xf0\x11\x9a\xd0\x57\x52\xc9\x59\x22\x24\xd3\xdb\xd7\x01\x70\xcf\xd1\xae\xb1\x7d\x03\xa6\x7f\x44\xa4\xcd\x0b\x85\xf1\x02\x04\xfe\x5f\x55\xca\x35\xec\x5b\x20\xd9\xfc\x39\xaf\x8f\xe1\x0c\xa7\x3a\xd7\xfb\x0c\x12\x65\xf3\x70\x16\x93\x63\x24\x7b\x9a\x71\xb5\xce\xfe\x65\x9e\xa7\x21\x0c\x88\xb5\x74\x36\xed\x3a\xb3\x6e\xd3\x08\x69\xf7\x8e\x86\xf6\x0c\xe3\x7c\xe4\x7d\x55\x90\xfa\x98\x32\xc6\x6e\x08\x01\x66\x11\x1f\x1f\x58\xf8\x88\x87\xdd\xa8\x9f\x39\x26\xf1\xcc\x03\x15\x7f\xaf\x37\x76\xaf\xd8\x64\x22\xf3\xa3\x56\xe5\xc9\xe9\xc8\xad\x1e\xcd\x49\x25\xea\x35\x9a\xf6\x23\x8c\x08\x57\xee\x95\xb6\xaf\xc5\xfc\x07\x07\xf8\x2c\x8c\xed\xca\x87\xae\xb6\xfd\xd3\x72\x95\x2f\x26\xee\x30\x7b\x81\xdf\x1c\xbc\x2e\x6b\x8a\xca\xdd\x3e\xc7\xc9\x3b\x66\xe8\x23\xd2\x0c\xdb\xe7\x71\x91\xe0\xc8\x2b\xad\x88\x54\xd1\x3e\x77\x74\xfb\x09\xe1\x08\xfa\x9d\xfd\x0b\x99\xf1\xb7\x01\x7f\x3e\x47\x47\x0c\xff\xe8\x02\x8d\xa5\xda\xe0\x69\x65\xda\x5d\xb3\x76\xd4\x2b\x3c\x45\x9a\x18\x6b\x84\xfd\x13\xec\x8c\x7c\x24\x1e\x15\x8e\x1b\xc7\xcb\xd2\x6e\x48\xb5\x9e\xc7\xae\x29\x3d\x92\xdd\xfe\x70\x74\x1c\x0a\x7a\x47\x95\x13\x7a\x80\x93\x94\x13\xd6\x1e\x51\x8e\x33\xe0\x17\x2b\xe7\xdc\x0c\xca\x70\x5c\x45\xd9\x60\xd8\x3d\x90\x62\xa0\x34\xf2\x6c\xff\x91\x52\xc2\xaa\x97\x70\x80\x4f\x9e\x0b\xff\xb9\x00\x0e\xca\x7e\xd2\xe1\xc7\x8c\x83\xe0\x19\x98\xb2\xea\xe5\x66\x33\x32\xe9\xa7\x98\xd6\x6c\x57\x1c\x37\x3e\x76\x11\x76\xbf\xad\xba\xbb\xe1\x8c\xa5\xa2\x10\x96\x59\x24\xdd\xaf\x35\x2b\x4b\x66\x45\x0a\x39\x93\xbc\xa0\xdc\x46\xa9\xae\xaa\x8a\xf0\x09\xca\x7e\x90\x1b\xc4\x6b\x73\xf8\xf9\xdf\x01\x23\xcd\xe7\x7f\x7f\x2d\x2f\x31\x8d\xcd\x76\xbe\xa0\x3a\x1b\xc5\x7b\x6f\xa8\x11\x0c\x36\x6f\x58\x51\xe5\xec\x4d\x37\x16\xbe\x6f\xf5\x5f\x8f\xf6\xa6\xfd\xa7\x2f\xc8\x97\x60\x75\x28\x79\xa8\xce\x63\x6b\x0c\x23\xff\x0f\x00\x00\xff\xff\x85\x25\x62\x92\xeb\x2b\x00\x00")

func appcatalogAppscodeCom_appbindingsYamlBytes() ([]byte, error) {
	return bindataRead(
		_appcatalogAppscodeCom_appbindingsYaml,
		"appcatalog.appscode.com_appbindings.yaml",
	)
}

func appcatalogAppscodeCom_appbindingsYaml() (*asset, error) {
	bytes, err := appcatalogAppscodeCom_appbindingsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appcatalog.appscode.com_appbindings.yaml", size: 11243, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appcatalog.appscode.com_appbindings.yaml": appcatalogAppscodeCom_appbindingsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"appcatalog.appscode.com_appbindings.yaml": {appcatalogAppscodeCom_appbindingsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
